name,ring,quadrant,isNew,description,,
Mockk,Adopt,languages-and-frameworks,FALSCH,"<p><strong><a href=""https://github.com/vektra/mockery"">Mockery</a></strong> is a mature <a href=""/radar/languages-and-frameworks/go-language"">Golang</a> library that helps generate mock implementations of interfaces and simulates the behavior of external dependencies. With type-safe methods to generate call expectations and flexible ways to mock return values, it enables the tests to focus on the business logic rather than worrying about the correctness of external dependencies. Mockery uses Go generators and simplifies the generation and management of the mocks in the test suite.</p>",,tag
Kotlin,Adopt,languages-and-frameworks,FALSCH,,,
Swift,Adopt,languages-and-frameworks,FALSCH,,,
SwiftUI,Adopt,languages-and-frameworks,FALSCH,,,
Compose,Adopt,languages-and-frameworks,FALSCH,,,
Java,Hold,languages-and-frameworks,FALSCH,,,
Objective-C,Hold,languages-and-frameworks,FALSCH,,,
Flutter,Trial,languages-and-frameworks,FALSCH,"<p><strong><a href=""https://dart.dev/"">Dart</a></strong> is a programming language developed by Google that supports building apps targeting multiple platforms, including web browsers, <a href=""/radar/languages-and-frameworks/webassembly"">WebAssembly</a>, desktop and mobile apps. Its adoption has been driven by the dominance of <a href=""/radar/languages-and-frameworks/flutter"">Flutter</a> — a popular, multi-platform UI toolkit powered by Dart — in the cross-platform native mobile app framework space. In response to community feedback, Dart has evolved since its initial versions and has added built-in <a href=""https://dart.dev/null-safety"">sound null safety</a> in version three, in addition to a robust type system. Furthermore, Dart's ecosystem is growing rapidly, with a vibrant community and a wide range of available libraries and tools, making it attractive for developers.</p>",,
Firebase Notifications,Adopt,languages-and-frameworks,FALSCH,,,
Mockito,Hold,languages-and-frameworks,FALSCH,,,
UIKit,Hold,languages-and-frameworks,FALSCH,,,
Hilt,Adopt,languages-and-frameworks,FALSCH,,,
Jetpack Navigation,Adopt,languages-and-frameworks,FALSCH,,,
Gradle Kotlin DSL,Adopt,languages-and-frameworks,FALSCH,,,
SPM,Adopt,languages-and-frameworks,FALSCH,,,
Kotest,Trial,languages-and-frameworks,WAHR,,,
Combine,Adopt,languages-and-frameworks,FALSCH,,,
ReactiveX,Hold,languages-and-frameworks,FALSCH,,,
Coroutines,Adopt,languages-and-frameworks,FALSCH,,,
Arrow,Assess,languages-and-frameworks,WAHR,,,
MVVM,Adopt,Platforms,FALSCH,,,
MVI,Trial,Platforms,WAHR,,,
Composable Architecture (TCA),Assess,Platforms,FALSCH,,,
MVC,Hold,Platforms,FALSCH,,,
Android,Adopt,Platforms,FALSCH,,,
iOS,Adopt,Platforms,FALSCH,,,
Huawei,Adopt,Platforms,FALSCH,,,
Design systems,Adopt,Techniques,FALSCH,"<p>As application development becomes increasingly dynamic and complex, it's a challenge to deliver accessible and usable products with consistent style. This is particularly true in larger organizations with multiple teams working on different products. <strong><a href=""https://www.thoughtworks.com/insights/decoder/d/design-systems"">Design systems</a></strong> define a collection of design patterns, component libraries and good design and engineering practices that ensure consistent digital products. Evolved from the corporate style guides of the past, design systems offer shared libraries and documents that are easy to find and use. Generally, guidance is written down as code and kept under version control so that the guide is less ambiguous and easier to maintain than simple documents. Design systems have become a standard approach when working across teams and disciplines in product development because they allow teams to focus. They can address strategic challenges around the product itself without reinventing the wheel every time a TRUE visual component is needed.</p>

<p>Our experiences show that teams seldom apply a product-centric mindset when building design systems. The primary consumers of the shared libraries and documents are the product development teams. When applying a product mindset, system owners should establish empathy with internal consumers (the development teams) and collaborate with them. We've found that the reason many component libraries are maligned is because the owning team wasn't able to give consumers what they needed fast enough and wasn't set up to take outside contributions. A product-centric mindset also requires organizations to think about if and how contributions should be made to the design system and how these contributions should be governed — on this topic, we recommend applying the <a href=""/radar/techniques/design-system-decision-records"">design system decision records</a> technique. For us, running a good design system or component library requires social work as much as technical work.</p>",,
Unit testing,Adopt,Techniques,FALSCH,,,
SSDLC,Adopt,Techniques,FALSCH,Thread Modelling, OWASP Top 10, Security Champion,,
Design system decision records,Trial,Techniques,WAHR,"<p>In a fast-paced product development environment where users' needs constantly evolve, design is an area that is ever-changing. This means input on design decisions will continue to be required. Borrowing from the idea of documenting architecture decisions via ADRs, we started adopting a similar format — <strong>design system decision records</strong> — in order to document design system decisions with the corresponding rationale, research insights and experiment results. Communicating design system decisions effectively seems to be an emerging need of product development teams, doing it in this light manner is also recommended by <a href=""https://zeroheight.com/blog/capturing-your-design-system-decisions/"">zeroheight</a>. This technique helped us reduce onboarding times, move conversations forward and align work streams that share the same design system.</p>https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions",,
LLM-powered autonomous agents,Assess,Techniques,WAHR,"<p>As development of large language models continues, interest in building autonomous AI agents is strong. <a href=""https://github.com/Significant-Gravitas/Auto-GPT"">AutoGPT</a>, <a href=""https://github.com/AntonOsika/gpt-engineer"">GPT-Engineer</a> and <a href=""https://github.com/yoheinakajima/babyagi"">BabyAGI</a> are all examples of <strong>LLM-powered autonomous agents</strong> that drive an underlying LLM to understand the goal they have been given and to work toward it. The agent remembers how far it has progressed, uses the LLM in order to reason about what to do next, takes actions and understands when the goal has been met. This is often known as chain-of-thought reasoning — and it can actually work. One of our teams implemented a client service chatbot as an autonomous agent. If the bot cannot achieve the customer's goal, it recognizes its own limitation and redirects the customer to a human instead. This approach is definitely early in its development cycle: autonomous agents often suffer from a high failure rate and incur costly AI service fees, and at least one AI startup has <a href=""https://twitter.com/zachtratar/status/1694024240880861571"">pivoted away</a> from an agent-based approach.</p>",,
Server Side UI for Apps,Assess,Techniques,WAHR,"<p>Since we first mentioned them in 2014, <a href=""/radar/platforms/web-components-standard"">web components</a> have become popular, and, on the whole, our experience has been positive. Similarly, we've voiced our support for rendering HTML on the server by cautioning against <a href=""/radar/techniques/spa-by-default"">SPA by default</a> and by including frameworks such as <a href=""/radar/languages-and-frameworks/next-js"">Next.js</a> and <a href=""/radar/languages-and-frameworks/htmx"">htmx</a> in addition to traditional server-side frameworks. However, although it’s possible to combine both, it can also prove deeply problematic, that’s why we suggest avoiding <strong>web components for server-side-rendered (SSR) web apps</strong>. As a browser technology, it's not trivial to use web components on the server. Frameworks have sprung up to make this easier, sometimes even using a browser engine, but the complexity is still there. Worse than the issues with developer experience is the user experience: Page load performance is impacted when custom web components have to be loaded and hydrated in the browser, and even with pre-rendering and careful tweaking of the component, a ""flash of unstyled content"" or some layout shifting is all but unavoidable. The decision to forgo web components can have far-reaching consequences as one of our teams experienced when they had to move their design system away from the web components–based <a href=""/radar/languages-and-frameworks/stencil"">Stencil</a>.</p>",,
App Modularization,Trial,Techniques,WAHR,https://docs.gradle.org/current/userguide/platforms.html,,
Cross Funktional Team - Backend+Web+App,Trial,Techniques,WAHR,,,
Feature Toggle,Trial,Techniques,FALSCH,,,
Opinionated and automated code formatting,Trial,Techniques,FALSCH,,,
UI Component Display,Assess,Techniques,WAHR,Storybook for Apps,,
Structured Logging,Trial,Techniques,FALSCH,,,
Crowdtesting,Adopt,Techniques,FALSCH,Testbirds,,
Roadmap Planning,Adopt,Techniques,FALSCH,,,
Lifecycle Management,Adopt,Techniques,FALSCH,,,
Kotlin Kover,Trial,Tools,FALSCH,"<p><a href=""https://github.com/Kotlin/kotlinx-kover""><strong>Kotlin Kover</strong></a> is a code coverage tool set designed specifically for <a href=""/radar/languages-and-frameworks/kotlin"">Kotlin</a>, supporting Kotlin JVM, <a href=""/radar/languages-and-frameworks/kotlin-multiplatform-mobile"">Multiplatform</a> and Android projects. The significance of code coverage lies in its ability to spotlight untested segments, which reinforces software reliability. As Kover evolves, it stands out because of its ability to produce comprehensive HTML and XML reports, coupled with unmatched precision tailored to Kotlin. For teams deeply rooted in Kotlin, we advise you to assess Kover to leverage its potential in enhancing code quality.</p>",,
SonarQube,Adopt,Tools,FALSCH,"<p><strong><a href=""https://snyk.io/"">Snyk</a></strong> provides both static application security testing (SAST) and software component analysis (SCA) tests to help you find, fix and monitor security issues throughout the software development lifecycle. Its broad range of features is designed to speed up the feedback loop, favoring a shift-left approach instead of the <a href=""/radar/techniques/security-sandwich"">security sandwich</a> anti-pattern. As one of the best security platforms available today, Snyk stands out because of its ability to identify a wider range of issues, enabled mainly by a <a href=""https://docs.snyk.io/scan-application-code/snyk-open-source/starting-to-fix-vulnerabilities/using-the-snyk-vulnerability-database"">dedicated research team adding to its vulnerability database</a>. But there’s room for improvement: the dashboard currently doesn't provide an easy way to filter noise down to specific actionable information, depending on the language ecosystem, SCA-based integrations can output false positives compared to pipeline-based integrations because Snyk has to guess what the resolved dependencies are, automated resolution is not consistently successful, and significant integration investment is required in order to achieve proper gatekeeping or to establish an <a href=""/radar/techniques/software-bill-of-materials"">SBOM</a> in high regulatory environments. Despite these shortcomings, many of our enterprise clients have adopted Snyk, we too are using it for our IT function.</p>",,
Maestro,Assess,Tools,WAHR,"<p><strong><a href=""https://maestro.mobile.dev/"">Maestro</a></strong> is a TRUE cross-platform mobile UI test automation tool with built-in tolerance for flakiness and variance in application load times because of network or external factors. With a declarative YAML syntax, it makes it easy to write and maintain automated tests for mobile apps. It supports iOS and Android native apps, <a href=""/radar/languages-and-frameworks/react-native"">React Native</a> and <a href=""/radar/languages-and-frameworks/flutter"">Flutter</a> apps, as well as a variety of features for automating complex mobile UI interactions, such as tapping, scrolling and swiping. Maestro is distributed as a single binary for ease of use, runs in interpreted mode and makes it easy to author TRUE tests thanks to features like continuous mode. Maestro still lacks specific features like support for iOS devices, but the tool is rapidly evolving.</p>",,
OpenRewrite,Assess,Tools,WAHR,"<p>We've seen several use cases for code intelligence tools: moving to a TRUE API version of a widely used library, understanding the impact of a just discovered vulnerability in such a library across an enterprise or applying updates to many services that were created from the same template. <a href=""/radar/tools/sourcegraph"">Sourcegraph</a> is still a popular tool in this space, and <strong><a href=""https://github.com/openrewrite/rewrite"">OpenRewrite</a></strong> is another tool we want to highlight. While our teams have mostly used it in Java for narrow problems, like updating services created through a starter kit, it continues to broaden its coverage of languages and use cases. We like that it comes bundled with a catalog of recipes, which describe the changes to be made, for example for migrating commonly used frameworks across versions. The refactoring engine, bundled recipes and build tool plugins are open-source software, which makes it easier for teams to reach for OpenRewrite just when they need it. It remains to be seen how the maturing space of code intelligence tools, which are all based on parsing the source code into an abstract syntax tree (AST), will be impacted by the rapid developments in the space of LLMs.</p>",,
GitHub Copilot,Trial,Tools,FALSCH,"<p><strong><a href=""https://github.com/features/copilot"">GitHub Copilot</a></strong> is used by many of our teams to help them write code faster. Overall, most of our developers find it very useful and would be cross if we took it away from them. We've been collating and sharing many of our experiences with Copilot through <a href=""https://martinfowler.com/articles/exploring-gen-ai.html"">a series on Generative AI</a> and <a href=""https://www.thoughtworks.com/insights/blog/generative-ai/getting-started-with-github-copilot"">a guide on getting started with Copilot</a>. Note that GitHub Copilot can be used with any codebase, not just codebases hosted on GitHub.</p>

<p>We're also excited that Copilot's chat feature from the <a href=""https://github.com/features/preview/copilot-x"">Copilot X roadmap</a> has become more widely available since we last featured it in the Radar. It is a powerful addition to Copilot's in-line assistance feature. The availability of a chat interface inside the IDE improves the discoverability of commonly searched information, and integration with the open editor context makes it easy to explore errors or ask the chat to assist with tasks related to the code in focus.</p>",,
ChatGPT,Trial,Tools,FALSCH,"<p><strong><a href=""https://openai.com/blog/chatgpt"">ChatGPT</a></strong> continues to attract attention. Imaginative use cases and innovative approaches to prompting mean it's gaining expanding utility over time. GPT4, the large language model (LLM) that powers ChatGPT, now also has the ability to integrate with external tools such as a knowledge management repository, sandboxed coding environment or web search. The recent introduction of <a href=""https://openai.com/blog/introducing-chatgpt-enterprise"">ChatGPT Enterprise</a> may help ease intellectual property concerns, while providing ""enterprise"" features such as usage tracking and better user management through SSO.</p>

<p>Although ChatGPT's ability to ""write"" code has been much vaunted, we think organizations should be looking at using it across the full software lifecycle to improve efficiency and reduce errors. For example, ChatGPT can provide additional perspectives or suggestions for tasks as diverse as requirements analysis, architectural design or the reverse engineering of legacy systems. We still think ChatGPT is best used as an input to a process — such as helping with a first draft of a story or the boilerplate for a coding task — rather than a tool that produces ""fully baked"" results. That said, its capabilities are improving each week, and some programming tasks may now be fully possible by careful prompting, which is an <a href=""/radar/techniques/prompt-engineering"">art in itself</a>.</p>",,
Appdynamics,Hold,Tools,FALSCH,,,
Promon AppShielder,Trial,Tools,FALSCH,,,
Swift Charts,Trial,Tools,FALSCH,,,
AIDA,Hold,Tools,FALSCH,,,
Lottie,Trial,Tools,FALSCH,,,
Renovate,Trial,Tools,FALSCH,,,
GenAI powered UI,Assess,Tools,WAHR,,,
CodiumAI,Trial,Tools,WAHR,,,
Detekt,Trial,Tools,FALSCH,,,
Cloud CI/CD,Adopt,Tools,WAHR,,,
fastlane,Adopt,Tools,FALSCH,,,
LeakCanary,Adopt,Tools,WAHR,,,
Espresso,Trial,Tools,FALSCH,,,
PowerMock,Hold,Tools,FALSCH,,,
OkHttp,Adopt,Tools,FALSCH,,,
MPAndroidChart,Adopt,Tools,FALSCH,,,
Retrofit,Adopt,Tools,FALSCH,,,
Glide,Adopt,Tools,FALSCH,,,
Room,Trial,Tools,FALSCH,,,
Moshi,Adopt,Tools,FALSCH,,,
AssertJ,Trial,Tools,WAHR,,,
Gradle,Adopt,Tools,FALSCH,,,
Jackson,Hold,Tools,FALSCH,,,